#setwd(choose.dir()) # choose the folder of this script
# setwd("put/path/here") # choose the folder of this script
runApp()
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/Analyse_01_Datensatz_vom_2021_06_24/data.RData")
View(my.data)
View(my.data)
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/R-scripts/Analyse_05_Datensatz_vom_2022_04_28/03_risk_for_event1_ICU_cache/html/ICU_hazard_rates_superinfection_30days_175c9209099f56ec3ab4b1f4fadf0df5.RData")
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/R-scripts/Analyse_05_Datensatz_vom_2022_04_28/03_risk_for_event1_ICU_cache/html/model_6states_mortality_c72dfaa762630ec5951e8fd71ad3a86f.RData")
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/R-scripts/Analyse_05_Datensatz_vom_2022_04_28/03_risk_for_event1_ICU_cache/html/ICU_transition_probability_4_states_superinfection_0bca5abadcfa108aa9d85002b1578e3f.RData")
library(pacman)
p_load(readxl, dplyr)
library(pacman)
p_load(readxl, dplyr)
my.data <- read_excel("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/data_2022_04_28.xlsx",
col_types = c("numeric", "date", "date",
"numeric", "text", "numeric", "text",
rep("date", 7), "text", "text",
rep("date", 10),
rep("numeric", 10)))
View(my.data)
View(my.data)
my.data <- my.data %>% mutate(
Geschlecht = factor(Geschlecht),
RM = factor(RM),
Blutkultur = ifelse(Blutkultur == "kbk", "kBK", Blutkultur),
Blutkultur = factor(Blutkultur),
Status_Entlassung = factor(Status_Entlassung)
)
Keimgruppe = c("KNS", "S.aureus", "S.pneumoniae", "H.influenzae",
"Nonfermenter", "Enterobakterien", "Hefen", "Enterokokken",
"Miscallenous", "B_Streptokokken")
my.data <- my.data %>% mutate(across(.cols = starts_with("ID_"),
.fns = ~ factor(.x, levels = 1:10,
labels = Keimgruppe)))
library(pacman)
str(my.data)
summary(my.data)
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/Analyse_03_Datensatz_vom_2022_04_28/data_2022_04_28.RData")
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/Analyse_03_Datensatz_vom_2022_04_28/data_2022_04_28.RData")
View(my.data)
View(my.data)
library(pacman)
p_load(dplyr, lubridate, hgutils)
p_load(dplyr, lubridate, hgutils)
load(file = "Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/Analyse_03_Datensatz_vom_2022_04_28/data_2022_04_28.RData")
View(my.data)
View(my.data)
my.data <- rename(my.data, id = Nr )
View(my.data)
View(my.data)
all.data <- my.data
View(all.data)
View(all.data)
## data correction. Abgesprochen mit Anne Catherine Loesslein
my.data%>%filter(my.data$Datum_nosInf < my.data$Aufnahme)
my.data[which(my.data$id == 411),]$Datum_nosInf <- as.Date("07.12.2020", "%d.%m.%Y", tz = "UTC")
my.data[which(my.data$id == 411),]
## data correction. Abgesprochen mit Anne Catherine Loesslein
my.data%>%filter(my.data$Datum_nosInf < my.data$Aufnahme)
my.data[which(my.data$id == 411),]$Datum_nosInf <- as.Date("07.12.2020", "%d.%m.%Y", tz = "UTC")
my.data[which(my.data$id == 411),]
##patients with “nosocomial” COVID infection before admission
# time of first infection in days since hospital admission
table(is.na(my.data$Aufnahme))
table(is.na(my.data$Datum_nosInf)) # Datum der nosocomialen COVID Infection, Nachweis
## are there patients who acquired a nosocomial infection before being admitted in the hospital
table(my.data$Datum_nosInf < my.data$Aufnahme)
### delete date of nosocomial infection for those
my.data <- my.data %>% mutate(Datum_nosInf = if_else(Datum_nosInf < Aufnahme, as.POSIXct(NA_character_, tz = "UTC"), Datum_nosInf ))
table(my.data$Datum_nosInf < my.data$Aufnahme)
## are there patients who acquired a nosocomial infection at the same day of hospital admission
table(my.data$Datum_nosInf == my.data$Aufnahme)
# keine
#correcting data manually
my.data %>%
select(id, Aufnahme, Entlassung, Aufenthaltsdauer, Aufenthaltsdauer_calc, Intensiv_Aufnahme01,
Intensiv_Entlassung01, Aufenthaltsdauer_calc_ICU , Aufenthaltsdauer_calc_ICU_Hosp) %>%
subset(Aufenthaltsdauer!= Aufenthaltsdauer_calc)
# year was wrong (they died at end of stay, so it could not be correct)
my.data$Intensiv_Entlassung01[my.data$id==22] <- as.POSIXct("2020-04-10", tz = "UTC")
my.data$Intensiv_Entlassung01[my.data$id==418] <- as.POSIXct("2021-02-12", tz = "UTC")
all.data$Intensiv_Entlassung01[all.data$id==22] <- as.POSIXct("2020-04-10", tz = "UTC")
all.data$Intensiv_Entlassung01[all.data$id==418] <- as.POSIXct("2021-02-12", tz = "UTC")
subset(my.data, id==418)
#Tracking exclusion of patients
flowchart <- inclusion_flowchart(as.data.frame(my.data))
View(flowchart)
View(flowchart)
#exclusion of second readmission to the hospital
#exclusion of second readmission to the hospital
nrow(my.data)
table(duplicated(my.data$id))
my.data[duplicated(my.data$id), ]
table(duplicated(my.data$id))
my.data[duplicated(my.data$id), ]
my.data <- my.data[order(my.data$id, my.data$Aufnahme), ]
dupid <- my.data[duplicated(my.data$id), ]$id
subset(my.data, id %in% dupid)
my.data <- my.data[order(my.data$id, my.data$Aufnahme), ]
dupid <- my.data[duplicated(my.data$id), ]$id
subset(my.data, id %in% dupid)
my.data <- exclude_patients(flowchart, my.data,  duplicated(my.data$id), excluded_text = "%s excluded, exclusion of second readmission to the hospital")
nrow(my.data)
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/Analyse_04_Datensatz_vom_2022_04_28/data_for_dif_models_2022_04_28.RData")
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/Analyse_05_Datensatz_vom_2022_04_28/data_for_dif_models_2022_04_28.RData")
View(my.data)
View(my.data)
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/Analyse_05_Datensatz_vom_2022_04_28/data_for_dif_models_ICU_Hosp_2022_04_28.RData")
load("Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/Analyse_05_Datensatz_vom_2022_04_28/data_for_dif_models_ICU_Hosp_2022_04_28.RData")
View(my.data3)
View(my.data3)
#Count number of unique "id" values
length(unique(my.data3$id))
#Reduce variables in the dataset to be used to determine the transition hazard rates----
# Select the desired columns
transihaz.data <- my.data3[, c("id", "from", "to", "entry", "exit")]
# Save the new dataset to the specified path
save(transihaz.data, file = "Q:/BEMB-P-MICLEP-21-F-COVID-19-NSI/data/rdata/transihaz.data.RData")
view(transihaz.data)
View(transihaz.data)
View(transihaz.data)
View(transihaz.data)
#Calculating the Transition-specific hazard rates ----
# Calculate patient-days spent in each 'from' state
patient_days <- transihaz.data %>%
mutate(time_in_state = exit - entry) %>%
group_by(from) %>%
summarise(total_patient_days = sum(time_in_state, na.rm = TRUE))
patient_days
# Count transitions from state i to state j
transitions <- transihaz.data %>%
group_by(from, to) %>%
summarise(n_transitions = n(), .groups = "drop")
transitions
# Join and compute hazard rates
hazard_rates <- transitions %>%
left_join(patient_days, by = "from") %>%
mutate(hazard_rate = n_transitions / total_patient_days)
# Join and compute hazard rates
hazard_rates <- transitions %>%
left_join(patient_days, by = "from") %>%
mutate(hazard_rate = n_transitions / total_patient_days)
#Calculating the Transition-specific hazard rates ----
# Calculate patient-days spent in each 'from' state
patient_days <- transihaz.data %>%
mutate(time_in_state = as.numeric(exit - entry, units = "days")) %>%
group_by(from) %>%
summarise(total_patient_days = sum(time_in_state, na.rm = TRUE))
patient_days
# Count transitions from state i to state j
transitions <- transihaz.data %>%
group_by(from, to) %>%
summarise(n_transitions = n(), .groups = "drop")
transitions
# Join and compute hazard rates
hazard_rates <- transitions %>%
left_join(patient_days, by = "from") %>%
mutate(hazard_rate = n_transitions / total_patient_days)
hazard_rates
# View result
print(hazard_rates)
t <- 100
# Hazard Matrix
Q <- matrix(0,
nrow = 6,
ncol = 6)
Q[1, 2] <- 0.0346
Q[1, 3] <- 0.0215
Q[1, 4] <- 0.0144
Q[2, 5] <- 0.0213
Q[2, 6] <- 0.0213
Q[1, 1] <- -sum(Q[1, ])
Q[2, 2] <- -sum(Q[2, ])
#create an artificial data.frame to save the computed rows into it:
trans_prob <-  data.frame("time_t"             = 0:t,
"P11"                = 0:t,
"P12"                = 0:t,
"P13"                = 0:t,
"P14"                = 0:t,
"P25"                = 0:t,
"P26"                = 0:t)
# calculation of transition probabilities:
for (i in seq_along(0:t)) {
t_ <- (0:t)[i]
P <- expm(Q * t_)
trans_prob[i, ] <- c(t_, P[1, ])
}
library(expm)
library(ggplot2)
library(expm)
library(ggplot2)
t <- 100
# Hazard Matrix
Q <- matrix(0,
nrow = 6,
ncol = 6)
Q[1, 2] <- 0.0346
Q[1, 3] <- 0.0215
Q[1, 4] <- 0.0144
Q[2, 5] <- 0.0213
Q[2, 6] <- 0.0213
Q[1, 1] <- -sum(Q[1, ])
Q[2, 2] <- -sum(Q[2, ])
#create an artificial data.frame to save the computed rows into it:
trans_prob <-  data.frame("time_t"             = 0:t,
"P11"                = 0:t,
"P12"                = 0:t,
"P13"                = 0:t,
"P14"                = 0:t,
"P25"                = 0:t,
"P26"                = 0:t)
# calculation of transition probabilities:
for (i in seq_along(0:t)) {
t_ <- (0:t)[i]
P <- expm(Q * t_)
trans_prob[i, ] <- c(t_, P[1, ])
}
# create data frame better readable for ggplot (long format)
p_time <- NULL
for (name in names(trans_prob)[-1]) {
acc <- data.frame(t = trans_prob$time_t,
p = trans_prob[, name],
name = name)
p_time <- rbind(p_time, acc)
}
# order stacks of plot
p_time$name <- as.factor(p_time$name)
p_time$name <- factor(p_time$name,
levels = levels(p_time$name)[c(1, 2, 3, 4, 5, 6)])
# plot
pl_2 = ggplot(p_time,
aes(x    = t,
y    = p,
fill = name)) +
labs(x = "\n Time ",
y = "Probability \n") +
scale_fill_manual(values = as.vector(palette.colors(palette = "Okabe-Ito"))[c(1, 2, 3, 4, 5, 6)]) +
geom_area(alpha = 0.8) +
theme_classic()
pl_2
######
t <- 100
# Hazard Matrix
Q <- matrix(0,
nrow = 6,
ncol = 6)
Q[1, 2] <- 0.0346
Q[1, 3] <- 0.0215
Q[1, 4] <- 0.0144
Q[2, 5] <- 0.0213
Q[2, 6] <- 0.0213
Q[1, 1] <- -sum(Q[1, ])
Q[2, 2] <- -sum(Q[2, ])
#create an artificial data.frame to save the computed rows into it:
trans_prob <-  data.frame("time_t"             = 0:t,
"P11"                = 0:t,
"P12"                = 0:t,
"P13"                = 0:t,
"P14"                = 0:t,
"P25"                = 0:t,
"P26"                = 0:t)
# calculation of transition probabilities:
for (i in seq_along(0:t)) {
t_ <- (0:t)[i]
P <- expm(Q * t_)
trans_prob[i, ] <- c(t_, P[1, ])
}
# create data frame better readable for ggplot (long format)
p_time <- NULL
for (name in names(trans_prob)[-1]) {
acc <- data.frame(t = trans_prob$time_t,
p = trans_prob[, name],
name = name)
p_time <- rbind(p_time, acc)
}
# order stacks of plot
p_time$name <- as.factor(p_time$name)
p_time$name <- factor(p_time$name,
levels = levels(p_time$name)[c(3,1 ,4 ,5 ,2 ,6 )])
# plot
pl_2 = ggplot(p_time,
aes(x    = t,
y    = p,
fill = name)) +
labs(x = "\n Time ",
y = "Probability \n") +
scale_fill_manual(values = as.vector(palette.colors(palette = "Okabe-Ito"))[c(3,1 ,4 ,5 ,2 ,6 )]) +
geom_area(alpha = 0.8) +
theme_classic()
pl_2
##Stacked prob. Plots ----
t <- 100
# Hazard Matrix
Q <- matrix(0,
nrow = 6,
ncol = 6)
Q[1, 2] <- 0.0346
Q[1, 3] <- 0.0215
Q[1, 4] <- 0.0144
Q[2, 5] <- 0.0213
Q[2, 6] <- 0.0213
Q[1, 1] <- -sum(Q[1, ])
Q[2, 2] <- -sum(Q[2, ])
#create an artificial data.frame to save the computed rows into it:
trans_prob <-  data.frame("time_t"             = 0:t,
"P11"                = 0:t,
"P12"                = 0:t,
"P13"                = 0:t,
"P14"                = 0:t,
"P25"                = 0:t,
"P26"                = 0:t)
# calculation of transition probabilities:
for (i in seq_along(0:t)) {
t_ <- (0:t)[i]
P <- expm(Q * t_)
trans_prob[i, ] <- c(t_, P[1, ])
}
# create data frame better readable for ggplot (long format)
p_time <- NULL
for (name in names(trans_prob)[-1]) {
acc <- data.frame(t = trans_prob$time_t,
p = trans_prob[, name],
name = name)
p_time <- rbind(p_time, acc)
}
# order stacks of plot
p_time$name <- as.factor(p_time$name)
p_time$name <- factor(p_time$name,
levels = levels(p_time$name)[c(3,1 ,4 ,5 ,2 ,6 )])
# plot
plt = ggplot(p_time,
aes(x    = t,
y    = p,
fill = name)) +
labs(x = "\n Time ",
y = "Probability \n") +
scale_fill_manual(values = as.vector(palette.colors(palette = "Okabe-Ito"))[c(3,1 ,4 ,5 ,2 ,6 )]) +
geom_area(alpha = 0.8) +
theme_classic()
plt
library(dplyr)
library(stats)
# Create a dataset summarizing counts and time at risk
poisson_data <- transihaz.data %>%
mutate(time_in_state = as.numeric(exit - entry, units = "days")) %>%
group_by(from, to) %>%
summarise(events = n(),
time_at_risk = sum(time_in_state, na.rm = TRUE),
.groups = "drop")
# Fit Poisson model (no covariates, log time as offset)
model <- glm(events ~ factor(from) + factor(to),
offset = log(time_at_risk),
data = poisson_data,
family = poisson())
summary(model)
t <- 100
# Hazard Matrix
Q <- matrix(0,
nrow = 6,
ncol = 6)
Q[1, 2] <- 0.0962
Q[1, 3] <- 0.0689
Q[1, 4] <- 0.0490
Q[2, 5] <- 0.0709
Q[2, 6] <- 0.0428
Q[1, 1] <- -sum(Q[1, ])
Q[2, 2] <- -sum(Q[2, ])
#create an artificial data.frame to save the computed rows into it:
trans_prob <-  data.frame("time_t"             = 0:t,
"P11"                = 0:t,
"P12"                = 0:t,
"P13"                = 0:t,
"P14"                = 0:t,
"P25"                = 0:t,
"P26"                = 0:t)
# calculation of transition probabilities:
for (i in seq_along(0:t)) {
t_ <- (0:t)[i]
P <- expm(Q * t_)
trans_prob[i, ] <- c(t_, P[1, ])
}
# create data frame better readable for ggplot (long format)
p_time <- NULL
for (name in names(trans_prob)[-1]) {
acc <- data.frame(t = trans_prob$time_t,
p = trans_prob[, name],
name = name)
p_time <- rbind(p_time, acc)
}
# order stacks of plot
p_time$name <- as.factor(p_time$name)
p_time$name <- factor(p_time$name,
levels = levels(p_time$name)[c(3,1 ,4 ,5 ,2 ,6 )])
# plot
plt = ggplot(p_time,
aes(x    = t,
y    = p,
fill = name)) +
labs(x = "\n Time ",
y = "Probability \n") +
scale_fill_manual(values = as.vector(palette.colors(palette = "Okabe-Ito"))[c(3,1 ,4 ,5 ,2 ,6 )]) +
geom_area(alpha = 0.8) +
theme_classic()
plt
t <- 90
# Hazard Matrix
Q <- matrix(0,
nrow = 6,
ncol = 6)
Q[1, 2] <- 0.0962
Q[1, 3] <- 0.0689
Q[1, 4] <- 0.0490
Q[2, 5] <- 0.0709
Q[2, 6] <- 0.0428
Q[1, 1] <- -sum(Q[1, ])
Q[2, 2] <- -sum(Q[2, ])
#create an artificial data.frame to save the computed rows into it:
trans_prob <-  data.frame("time_t"             = 0:t,
"P11"                = 0:t,
"P12"                = 0:t,
"P13"                = 0:t,
"P14"                = 0:t,
"P25"                = 0:t,
"P26"                = 0:t)
# calculation of transition probabilities:
for (i in seq_along(0:t)) {
t_ <- (0:t)[i]
P <- expm(Q * t_)
trans_prob[i, ] <- c(t_, P[1, ])
}
# create data frame better readable for ggplot (long format)
p_time <- NULL
for (name in names(trans_prob)[-1]) {
acc <- data.frame(t = trans_prob$time_t,
p = trans_prob[, name],
name = name)
p_time <- rbind(p_time, acc)
}
# order stacks of plot
p_time$name <- as.factor(p_time$name)
p_time$name <- factor(p_time$name,
levels = levels(p_time$name)[c(3,1 ,4 ,5 ,2 ,6 )])
# plot
plt = ggplot(p_time,
aes(x    = t,
y    = p,
fill = name)) +
labs(x = "\n Time ",
y = "Probability \n") +
scale_fill_manual(values = as.vector(palette.colors(palette = "Okabe-Ito"))[c(3,1 ,4 ,5 ,2 ,6 )]) +
geom_area(alpha = 0.8) +
theme_classic()
plt
#Overview of the newly saved dataset
View(transihaz.data)
#Calculating the Transition-specific hazard rates ----
# Calculate patient-days spent in each 'from' state
patient_days <- transihaz.data %>%
mutate(time_in_state = as.numeric(exit - entry, units = "days")) %>%
group_by(from) %>%
summarise(total_patient_days = sum(time_in_state, na.rm = TRUE))
# Count transitions from state i to state j
transitions <- transihaz.data %>%
group_by(from, to) %>%
summarise(n_transitions = n(), .groups = "drop")
# Join and compute hazard rates
hazard_rates <- transitions %>%
left_join(patient_days, by = "from") %>%
mutate(hazard_rate = n_transitions / total_patient_days)
# View result
print(hazard_rates)
exp_coef <- exp(coef(model))
round(exp_coef, 4)
#Calculating the Transition-specific hazard rates ----
# Calculate patient-days spent in each 'from' state
patient_days <- transihaz.data %>%
mutate(time_in_state = as.numeric(exit - entry, units = "days")) %>%
group_by(from) %>%
summarise(total_patient_days = sum(time_in_state, na.rm = TRUE))
# Count transitions from state i to state j
transitions <- transihaz.data %>%
group_by(from, to) %>%
summarise(n_transitions = n(), .groups = "drop")
# Join and compute hazard rates
hazard_rates <- transitions %>%
left_join(patient_days, by = "from") %>%
mutate(hazard_rate = n_transitions / total_patient_days)
# View result
print(hazard_rates)
# Create a dataset summarizing counts and time at risk
poisson_data <- transihaz.data %>%
mutate(time_in_state = as.numeric(exit - entry, units = "days")) %>%
group_by(from, to) %>%
summarise(events = n(),
time_at_risk = sum(time_in_state, na.rm = TRUE),
.groups = "drop")
# Fit Poisson model (no covariates, log time as offset)
model <- glm(events ~ factor(from) + factor(to),
offset = log(time_at_risk),
data = poisson_data,
family = poisson())
summary(model)
exp_coef <- exp(coef(model))
round(exp_coef, 4)
poisson_data <- poisson_data %>%
mutate(transition = paste0(from, "_to_", to))
model_full <- glm(events ~ transition,
offset = log(time_at_risk),
family = poisson(),
data = poisson_data)
exp(coef(model_full))
library(shiny); source('run.R')
